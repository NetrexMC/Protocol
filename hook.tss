// This hook is to provide typesharp with
// the ability to compile mixed rust and t# code.
#compiler no-lazy-types decorators-v2
#compiler use-compile-events -with-types

// This is only in std during betas.
use std::extern::rustc;
use std::extern::rustc_util as util;

#compiler @parse_error
pub fn on_parse_error({ ast }: CompileError): Possibly<any> {
     // implicit cast to rust AST
     ast = ast.into<Rust.AST>();
     // rust util in t#
     var inter = rustc::interfaces::CompilerConfigDefault();
     if var code = ast.assemble(util::assemblers("rust"), ast).to_string() {
          // start compiling!
          // we need to merge this ast
          return rustc::interfaces::run_compiler(inter, code) || Possibly();
     }

     return Possibly<Typesharp::compiler::Op>(Op::Advance);
}